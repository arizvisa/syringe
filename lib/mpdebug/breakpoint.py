import dispatch

class interrupt(object):
    id = None
    def __init__(self, task, *args, **kwds):
        pass
    def __enter__(self):
        pass
    def __exit__(self, type, value, traceback):
        pass

class manager(dict):
    # only generated by a thread, never to be associated with a process
    def __init__(self, task):
        pass

    def add(self, function, interruption, *args, **kwds):
        assert issubclass(interruption, interrupt)
        brk = interrupt_type(self.task, *args, **kwds)
        id = brk.id
        self[id] = brk,function

    def dispatch(self, breakpoint):
        brk,fn = self[breakpoint.Id]
        with brk:
            result = fn(brk, self.task)
        return result

    def rm(self, id):
        brk,fn = self[id]

        del(self[brk.id])
        brk.__del__()   # XXX: :-/
